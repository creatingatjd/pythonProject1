#Sample Test
name: $(Rev:r)
pool:
  vmImage: ubuntu-latest
variables:
 - name: public_ip
   value: "[\'52.91.213.126\']"

stages:
- stage: build
  jobs:
    - job: build
      steps:
       - task: Bash@3
         displayName: 'Replace IP'      
         inputs:
           targetType: 'inline'
           script: 'sed -i "s/^ALLOWED_HOSTS = \[''.*''\]/ALLOWED_HOSTS = $(public_ip)/" settings.py'
           workingDirectory: '$(Build.SourcesDirectory)/webpro'
          
       - task: CmdLine@2
         displayName: 'install python dependencies'
         inputs:
           script: 'pip install -r requirements.txt'
       - task: PythonScript@0
         displayName: 'code compilation'
         inputs:
          scriptSource: 'filePath'
          scriptPath: 'manage.py'
       - task: Docker@2
         displayName: 'build and push docker'
         inputs:
           containerRegistry: 'mydockerhub'
           repository: '1234si/pythonapp'
           command: 'buildAndPush'
           Dockerfile: 'Dockerfile'
           tags: '$(Build.BuildNumber)'
       - task: CopyFiles@2
         displayName: 'Copy deployment files'
         inputs:
           SourceFolder: '$(Build.SourcesDirectory)'
           Contents: |
             docker-compose.yml
             nginx.conf
           TargetFolder: '$(Build.ArtifactStagingDirectory)'
       - task: PublishBuildArtifacts@1
         displayName: 'publish build artifacts'
         inputs:
           PathtoPublish: '$(Build.ArtifactStagingDirectory)'
           ArtifactName: 'drop'
           publishLocation: 'Container'
- stage: deploy_development
  jobs:
    - deployment: deploy
      environment: Development
    - job: deploy
      steps:
       - task: DownloadBuildArtifacts@1
         inputs:
            buildType: 'current'
            downloadType: 'specific'
            downloadPath: '$(System.ArtifactsDirectory)'
       - task: DockerCompose@0
         displayName: 'Run a Docker Compose command'
         inputs:
             containerregistrytype: 'Container Registry'
             dockerRegistryEndpoint: mydockerhub
             dockerComposeFile: '$(System.ArtifactsDirectory)/drop/docker-compose.yml'
             dockerComposeFileArgs: 'TAG=$(Build.BuildNumber)'
             projectName: pythonapp
             qualifyImageNames: false
             dockerComposeCommand: up
             arguments: '--detach'
             workingDirectory: '$(System.ArtifactsDirectory)'
- stage: deploy_QA
  jobs:
   - deployment: deploy
     environment: QA
   - job: deploy
     steps:
       - task: DownloadBuildArtifacts@1
         inputs:
            buildType: 'current'
            downloadType: 'specific'
            downloadPath: '$(System.ArtifactsDirectory)'
       - task: DockerCompose@0
         displayName: 'Run a Docker Compose command'
         inputs:
             containerregistrytype: 'Container Registry'
             dockerRegistryEndpoint: mydockerhub
             dockerComposeFile: '$(System.ArtifactsDirectory)/drop/docker-compose.yml'
             dockerComposeFileArgs: 'TAG=$(Build.BuildNumber)'
             projectName: pythonapp
             qualifyImageNames: false
             dockerComposeCommand: up
             arguments: '--detach'
             workingDirectory: '$(System.ArtifactsDirectory)'
